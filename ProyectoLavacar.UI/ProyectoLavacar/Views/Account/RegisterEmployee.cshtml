@model ProyectoLavacar.Models.RegisterEmployeeViewModel

@{
    ViewBag.Title = "RegisterEmployee";
    Layout = null; // Remove if using a shared layout
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - Lavacar</title>

    <!-- CSS -->
    <link href="~/Content/assets/css/animate.css" rel="stylesheet" />
    <link href="~/Content/assets/css/bootstrap.min.css" rel="stylesheet" />
    <link href="~/Content/assets/css/default.css" rel="stylesheet" />
    <link href="~/Content/assets/css/magnific-popup.css" rel="stylesheet" />
    <link href="~/Content/assets/css/slick.css" rel="stylesheet" />
    <link href="~/Content/assets/css/style.css" rel="stylesheet" />
    <link href="~/Content/assets/fonts/flaticon/flaticon.css" rel="stylesheet" />
    <link href="~/Content/assets/fonts/fontawesome/css/all.min.css" rel="stylesheet" />

    <style>
        .luxury-register-container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 2rem;
            position: relative;
            overflow: hidden;
        }

        .luxury-register-card {
            width: 100%;
            max-width: 1000px;
            background: white;
            border-radius: 20px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.08);
            overflow: hidden;
            position: relative;
            z-index: 2;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.3);
            padding: 40px;
        }

        .luxury-decoration {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            overflow: hidden;
            z-index: -1;
        }

        .decoration-circle {
            position: absolute;
            border-radius: 50%;
            background: linear-gradient(135deg, rgba(69, 196, 176, 0.1) 0%, rgba(154, 235, 163, 0.05) 100%);
        }

            .decoration-circle.circle-1 {
                width: 300px;
                height: 300px;
                top: -150px;
                right: -150px;
            }

            .decoration-circle.circle-2 {
                width: 200px;
                height: 200px;
                bottom: -100px;
                left: -100px;
            }

        .decoration-diamond {
            position: absolute;
            width: 150px;
            height: 150px;
            background: linear-gradient(135deg, rgba(19, 87, 138, 0.05) 0%, rgba(1, 32, 48, 0.03) 100%);
            transform: rotate(45deg);
            top: 50%;
            left: -75px;
        }

        .card-header {
            text-align: center;
            margin-bottom: 30px;
            position: relative;
        }

        .luxury-icon {
            width: 80px;
            height: 80px;
            margin: 0 auto 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, #45C4B0 0%, #9AEBA3 100%);
            border-radius: 50%;
            color: white;
            box-shadow: 0 10px 30px rgba(69, 196, 176, 0.3);
        }

            .luxury-icon svg {
                width: 40px;
                height: 40px;
            }

        .luxury-title {
            font-size: 28px;
            font-weight: 600;
            color: #012030;
            margin: 0 0 15px;
            letter-spacing: 0.5px;
        }

        .luxury-divider {
            width: 60px;
            height: 3px;
            background: linear-gradient(90deg, #45C4B0 0%, #9AEBA3 100%);
            margin: 0 auto;
            border-radius: 3px;
        }

        .form-intro {
            margin-bottom: 30px;
            text-align: center;
        }

        .form-subtitle {
            font-size: 20px;
            color: #13578A;
            font-weight: 500;
            margin-bottom: 10px;
        }

        .form-description {
            color: #6c757d;
            font-size: 15px;
            line-height: 1.6;
            margin: 0;
        }

        .luxury-form-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        .form-column {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .luxury-input-group {
            position: relative;
        }

        .input-label {
            display: block;
            margin-bottom: 8px;
            color: #495057;
            font-size: 14px;
            font-weight: 500;
        }

        .input-container {
            position: relative;
        }

        .input-icon {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: #45C4B0;
            z-index: 1;
        }

            .input-icon svg {
                width: 20px;
                height: 20px;
            }

        .luxury-input {
            width: 100%;
            padding: 15px 15px 15px 50px;
            border: 1px solid #e0e0e0;
            border-radius: 10px;
            font-size: 15px;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.7);
            color: #495057;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.03);
        }

            .luxury-input:focus {
                border-color: #45C4B0;
                box-shadow: 0 0 0 3px rgba(69, 196, 176, 0.1);
                outline: none;
                background: white;
            }

        .input-border {
            position: absolute;
            bottom: 0;
            left: 0;
            width: 0;
            height: 2px;
            background: linear-gradient(90deg, #45C4B0 0%, #9AEBA3 100%);
            transition: width 0.4s ease;
        }

        .luxury-input:focus ~ .input-border {
            width: 100%;
        }

        .validation-message {
            display: block;
            color: #d32f2f;
            font-size: 12px;
            margin-top: 5px;
        }

        .luxury-alert {
            padding: 15px;
            background: #fff4f4;
            color: #d32f2f;
            border-radius: 10px;
            margin-bottom: 25px;
            border: 1px solid #ffcdd2;
            font-size: 14px;
            text-align: center;
            grid-column: span 2;
        }

        .luxury-button {
            position: relative;
            width: 100%;
            padding: 18px;
            background: linear-gradient(135deg, #45C4B0 0%, #9AEBA3 100%);
            color: white;
            border: none;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            overflow: hidden;
            transition: all 0.4s ease;
            box-shadow: 0 10px 20px rgba(69, 196, 176, 0.2);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            margin-top: 20px;
            grid-column: span 2;
        }

        .button-text {
            position: relative;
            z-index: 2;
        }

        .button-icon {
            position: relative;
            z-index: 2;
            display: flex;
            transition: transform 0.3s ease;
        }

            .button-icon svg {
                width: 20px;
                height: 20px;
            }

        .button-shine {
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.6s ease;
        }

        .luxury-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 30px rgba(69, 196, 176, 0.3);
        }

            .luxury-button:hover .button-shine {
                left: 100%;
            }

            .luxury-button:hover .button-icon {
                transform: translateX(5px);
            }

        .card-footer {
            margin-top: 30px;
            text-align: center;
            padding-top: 20px;
            border-top: 1px solid #f0f0f0;
            grid-column: span 2;
        }

        .footer-text {
            color: #6c757d;
            font-size: 14px;
            margin: 0;
        }

        .footer-link {
            color: #45C4B0;
            font-weight: 500;
            text-decoration: none;
            transition: color 0.3s ease;
            position: relative;
        }

            .footer-link:hover {
                color: #13578A;
            }

            .footer-link::after {
                content: '';
                position: absolute;
                bottom: -2px;
                left: 0;
                width: 0;
                height: 1px;
                background: #45C4B0;
                transition: width 0.3s ease;
            }

            .footer-link:hover::after {
                width: 100%;
            }

        /* Checkbox styling */
        .checkbox-container {
            display: flex;
            align-items: center;
            margin-top: 10px;
        }

        .checkbox-label {
            margin-left: 10px;
            color: #495057;
            font-size: 14px;
        }

        .luxury-checkbox {
            width: 20px;
            height: 20px;
            border: 2px solid #45C4B0;
            border-radius: 5px;
            appearance: none;
            outline: none;
            cursor: pointer;
            position: relative;
            transition: all 0.3s ease;
        }

            .luxury-checkbox:checked {
                background-color: #45C4B0;
            }

                .luxury-checkbox:checked::after {
                    content: '\2713';
                    position: absolute;
                    color: white;
                    font-size: 14px;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                }

        /* Dropdown styling */
        .luxury-dropdown {
            width: 100%;
            padding: 15px 15px 15px 50px;
            border: 1px solid #e0e0e0;
            border-radius: 10px;
            font-size: 15px;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.7);
            color: #495057;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.03);
            appearance: none;
            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right 15px center;
            background-size: 15px;
        }

            .luxury-dropdown:focus {
                border-color: #45C4B0;
                box-shadow: 0 0 0 3px rgba(69, 196, 176, 0.1);
                outline: none;
                background: white;
            }

        /* Password toggle */
        .password-toggle {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            z-index: 2;
            background: transparent;
            border: none;
            padding: 0;
            margin: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 24px;
            height: 24px;
        }

        .eye-icon {
            width: 20px;
            height: 20px;
            color: #666;
            transition: color 0.3s ease;
        }

        .password-toggle:hover .eye-icon {
            color: #333;
        }

        .input-container {
            position: relative;
        }

        .luxury-input {
            padding-right: 40px !important;
        }

        /* Animations */
        @@keyframes float {
            0%, 100% {
                transform: translateY(0);
            }

            50% {
                transform: translateY(-10px);
            }
        }

        .luxury-icon {
            animation: float 4s ease-in-out infinite;
        }

        /* Responsive adjustments */
        @@media (max-width: 768px) {
            .luxury-form-grid {
                grid-template-columns: 1fr;
            }

            .luxury-register-card {
                padding: 30px 20px;
            }

            .luxury-title {
                font-size: 24px;
            }

            .luxury-input, .luxury-dropdown {
                padding: 12px 12px 12px 45px;
            }
        }
    </style>
</head>
<body>
    <div class="luxury-register-container">
        <div class="luxury-register-card">
            <!-- Decoración de lujo -->
            <div class="luxury-decoration">
                <div class="decoration-circle circle-1"></div>
                <div class="decoration-circle circle-2"></div>
                <div class="decoration-diamond"></div>
            </div>

            <div class="card-header">
                <div class="luxury-icon">
                    <svg viewBox="0 0 24 24">
                        <path fill="currentColor" d="M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,6A2,2 0 0,0 10,8A2,2 0 0,0 12,10A2,2 0 0,0 14,8A2,2 0 0,0 12,6M12,13C14.67,13 20,14.33 20,17V20H4V17C4,14.33 9.33,13 12,13M12,14.9C9.03,14.9 5.9,16.36 5.9,17V18.1H18.1V17C18.1,16.36 14.97,14.9 12,14.9Z" />
                    </svg>
                </div>
                <h1 class="luxury-title">Registrar Empleado</h1>
                <div class="luxury-divider"></div>
            </div>

            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                <div class="form-intro">
                    <h2 class="form-subtitle">Registro de personal</h2>
                    <p class="form-description">Complete los datos del empleado para crear su cuenta</p>
                </div>

                @Html.ValidationSummary(true, "", new { @class = "luxury-alert" })

                <div class="luxury-form-grid">
                    <!-- Columna Izquierda -->
                    <div class="form-column">
                        <div class="form-group">
                            <div class="luxury-input-group">
                                @Html.LabelFor(model => model.Nombre, new { @class = "input-label" })
                                <div class="input-container">
                                    <span class="input-icon">
                                        <svg viewBox="0 0 24 24">
                                            <path fill="currentColor" d="M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,6A2,2 0 0,0 10,8A2,2 0 0,0 12,10A2,2 0 0,0 14,8A2,2 0 0,0 12,6M12,13C14.67,13 20,14.33 20,17V20H4V17C4,14.33 9.33,13 12,13M12,14.9C9.03,14.9 5.9,16.36 5.9,17V18.1H18.1V17C18.1,16.36 14.97,14.9 12,14.9Z" />
                                        </svg>
                                    </span>
                                    @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "luxury-input" } })
                                    <span class="input-border"></span>
                                </div>
                                @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "validation-message" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="luxury-input-group">
                                @Html.LabelFor(model => model.PrimerApellido, new { @class = "input-label" })
                                <div class="input-container">
                                    <span class="input-icon">
                                        <svg viewBox="0 0 24 24">
                                            <path fill="currentColor" d="M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,6A2,2 0 0,0 10,8A2,2 0 0,0 12,10A2,2 0 0,0 14,8A2,2 0 0,0 12,6M12,13C14.67,13 20,14.33 20,17V20H4V17C4,14.33 9.33,13 12,13M12,14.9C9.03,14.9 5.9,16.36 5.9,17V18.1H18.1V17C18.1,16.36 14.97,14.9 12,14.9Z" />
                                        </svg>
                                    </span>
                                    @Html.EditorFor(model => model.PrimerApellido, new { htmlAttributes = new { @class = "luxury-input" } })
                                    <span class="input-border"></span>
                                </div>
                                @Html.ValidationMessageFor(model => model.PrimerApellido, "", new { @class = "validation-message" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="luxury-input-group">
                                @Html.LabelFor(model => model.SegundoApellido, new { @class = "input-label" })
                                <div class="input-container">
                                    <span class="input-icon">
                                        <svg viewBox="0 0 24 24">
                                            <path fill="currentColor" d="M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,6A2,2 0 0,0 10,8A2,2 0 0,0 12,10A2,2 0 0,0 14,8A2,2 0 0,0 12,6M12,13C14.67,13 20,14.33 20,17V20H4V17C4,14.33 9.33,13 12,13M12,14.9C9.03,14.9 5.9,16.36 5.9,17V18.1H18.1V17C18.1,16.36 14.97,14.9 12,14.9Z" />
                                        </svg>
                                    </span>
                                    @Html.EditorFor(model => model.SegundoApellido, new { htmlAttributes = new { @class = "luxury-input" } })
                                    <span class="input-border"></span>
                                </div>
                                @Html.ValidationMessageFor(model => model.SegundoApellido, "", new { @class = "validation-message" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="luxury-input-group">
                                @Html.LabelFor(model => model.cedula, new { @class = "input-label" })
                                <div class="input-container">
                                    <span class="input-icon">
                                        <svg viewBox="0 0 24 24">
                                            <path fill="currentColor" d="M4,4A2,2 0 0,0 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V6A2,2 0 0,0 20,4H4M4,6H20V18H4V6M12,7.75A2.25,2.25 0 0,0 9.75,10A2.25,2.25 0 0,0 12,12.25A2.25,2.25 0 0,0 14.25,10A2.25,2.25 0 0,0 12,7.75M8,17V15.5C8,13.83 10.33,13 12,13C13.67,13 16,13.83 16,15.5V17H8Z" />
                                        </svg>
                                    </span>
                                    @Html.EditorFor(model => model.cedula, new { htmlAttributes = new { @class = "luxury-input" } })
                                    <span class="input-border"></span>
                                </div>
                                @Html.ValidationMessageFor(model => model.cedula, "", new { @class = "validation-message" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="luxury-input-group">
                                @Html.LabelFor(model => model.numeroCuenta, new { @class = "input-label" })
                                <div class="input-container">
                                    <span class="input-icon">
                                        <svg viewBox="0 0 24 24">
                                            <path fill="currentColor" d="M11,17H7V15H11M12,17V15H17V17M19,3H18V1H16V3H8V1H6V3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3M19,19H5V9H19V19Z" />
                                        </svg>
                                    </span>
                                    @Html.EditorFor(model => model.numeroCuenta, new { htmlAttributes = new { @class = "luxury-input" } })
                                    <span class="input-border"></span>
                                </div>
                                @Html.ValidationMessageFor(model => model.numeroCuenta, "", new { @class = "validation-message" })
                            </div>
                        </div>
                    </div>

                    <!-- Columna Derecha -->
                    <div class="form-column">
                        <div class="form-group">
                            <div class="luxury-input-group">
                                @Html.LabelFor(model => model.Email, new { @class = "input-label" })
                                <div class="input-container">
                                    <span class="input-icon">
                                        <svg viewBox="0 0 24 24">
                                            <path fill="currentColor" d="M22 6C22 4.9 21.1 4 20 4H4C2.9 4 2 4.9 2 6V18C2 19.1 2.9 20 4 20H20C21.1 20 22 19.1 22 18V6M20 6L12 11L4 6H20M20 18H4V8L12 13L20 8V18Z" />
                                        </svg>
                                    </span>
                                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "luxury-input" } })
                                    <span class="input-border"></span>
                                </div>
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "validation-message" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="luxury-input-group">
                                @Html.LabelFor(model => model.UserName, new { @class = "input-label" })
                                <div class="input-container">
                                    <span class="input-icon">
                                        <svg viewBox="0 0 24 24">
                                            <path fill="currentColor" d="M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,6A2,2 0 0,0 10,8A2,2 0 0,0 12,10A2,2 0 0,0 14,8A2,2 0 0,0 12,6M12,13C14.67,13 20,14.33 20,17V20H4V17C4,14.33 9.33,13 12,13M12,14.9C9.03,14.9 5.9,16.36 5.9,17V18.1H18.1V17C18.1,16.36 14.97,14.9 12,14.9Z" />
                                        </svg>
                                    </span>
                                    @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "luxury-input" } })
                                    <span class="input-border"></span>
                                </div>
                                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "validation-message" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="luxury-input-group">
                                @Html.LabelFor(model => model.Password, new { @class = "input-label" })
                                <div class="input-container">
                                    <span class="input-icon">
                                        <svg viewBox="0 0 24 24">
                                            <path fill="currentColor" d="M12,17A2,2 0 0,0 14,15C14,13.89 13.1,13 12,13A2,2 0 0,0 10,15A2,2 0 0,0 12,17M18,8A2,2 0 0,1 20,10V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V10C4,8.89 4.9,8 6,8H7V6A5,5 0 0,1 12,1A5,5 0 0,1 17,6V8H18M12,3A3,3 0 0,0 9,6V8H15V6A3,3 0 0,0 12,3Z" />
                                        </svg>
                                    </span>
                                    @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "luxury-input", @id = "Password", @type = "password" } })
                                    <span class="password-toggle" onclick="togglePassword('Password', this)">
                                        <svg viewBox="0 0 24 24" class="eye-icon">
                                            <path fill="currentColor" d="M12,9A3,3 0 0,1 15,12A3,3 0 0,1 12,15A3,3 0 0,1 9,12A3,3 0 0,1 12,9M12,4.5C17,4.5 21.27,7.61 23,12C21.27,16.39 17,19.5 12,19.5C7,19.5 2.73,16.39 1,12C2.73,7.61 7,4.5 12,4.5M3.18,12C4.83,15.36 8.24,17.5 12,17.5C15.76,17.5 19.17,15.36 20.82,12C19.17,8.64 15.76,6.5 12,6.5C8.24,6.5 4.83,8.64 3.18,12Z" />
                                        </svg>
                                    </span>
                                    <span class="input-border"></span>
                                </div>
                                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "validation-message" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="luxury-input-group">
                                @Html.LabelFor(model => model.ConfirmPassword, new { @class = "input-label" })
                                <div class="input-container">
                                    <span class="input-icon">
                                        <svg viewBox="0 0 24 24">
                                            <path fill="currentColor" d="M12,17A2,2 0 0,0 14,15C14,13.89 13.1,13 12,13A2,2 0 0,0 10,15A2,2 0 0,0 12,17M18,8A2,2 0 0,1 20,10V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V10C4,8.89 4.9,8 6,8H7V6A5,5 0 0,1 12,1A5,5 0 0,1 17,6V8H18M12,3A3,3 0 0,0 9,6V8H15V6A3,3 0 0,0 12,3Z" />
                                        </svg>
                                    </span>
                                    @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "luxury-input", @id = "ConfirmPassword", @type = "password" } })
                                    <span class="password-toggle" onclick="togglePassword('ConfirmPassword', this)">
                                        <svg viewBox="0 0 24 24" class="eye-icon">
                                            <path fill="currentColor" d="M12,9A3,3 0 0,1 15,12A3,3 0 0,1 12,15A3,3 0 0,1 9,12A3,3 0 0,1 12,9M12,4.5C17,4.5 21.27,7.61 23,12C21.27,16.39 17,19.5 12,19.5C7,19.5 2.73,16.39 1,12C2.73,7.61 7,4.5 12,4.5M3.18,12C4.83,15.36 8.24,17.5 12,17.5C15.76,17.5 19.17,15.36 20.82,12C19.17,8.64 15.76,6.5 12,6.5C8.24,6.5 4.83,8.64 3.18,12Z" />
                                        </svg>
                                    </span>
                                    <span class="input-border"></span>
                                </div>
                                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "validation-message" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="luxury-input-group">
                                @Html.LabelFor(model => model.puesto, new { @class = "input-label" })
                                <div class="input-container">
                                    <span class="input-icon">
                                        <svg viewBox="0 0 24 24">
                                            <path fill="currentColor" d="M10,2H14A2,2 0 0,1 16,4V6H20A2,2 0 0,1 22,8V19A2,2 0 0,1 20,21H4C2.89,21 2,20.1 2,19V8C2,6.89 2.89,6 4,6H8V4C8,2.89 8.89,2 10,2M14,6V4H10V6H14Z" />
                                        </svg>
                                    </span>
                                    @Html.EditorFor(model => model.puesto, new { htmlAttributes = new { @class = "luxury-input" } })
                                    <span class="input-border"></span>
                                </div>
                                @Html.ValidationMessageFor(model => model.puesto, "", new { @class = "validation-message" })
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Additional fields in a new row -->
                <div class="luxury-form-grid" style="margin-top: 20px;">
                    <div class="form-group">
                        <div class="luxury-input-group">
                            @Html.LabelFor(model => model.turno, new { @class = "input-label" })
                            <div class="input-container">
                                <span class="input-icon">
                                    <svg viewBox="0 0 24 24">
                                        <path fill="currentColor" d="M12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22C6.47,22 2,17.5 2,12A10,10 0 0,1 12,2M12.5,7V12.25L17,14.92L16.25,16.15L11,13V7H12.5Z" />
                                    </svg>
                                </span>
                                @Html.DropDownListFor(model => model.turno,
                                    new SelectList(ViewBag.turno, "Value", "Text"),
                                    "-- Seleccione un turno --",
                                    new { @class = "luxury-dropdown" })
                                @Html.ValidationMessageFor(model => model.turno, "", new { @class = "validation-message" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="luxury-input-group">
                            @Html.LabelFor(model => model.Role, new { @class = "input-label" })
                            <div class="input-container">
                                <span class="input-icon">
                                    <svg viewBox="0 0 24 24">
                                        <path fill="currentColor" d="M12,1L3,5V11C3,16.55 6.84,21.74 12,23C17.16,21.74 21,16.55 21,11V5L12,1M12,5A3,3 0 0,1 15,8A3,3 0 0,1 12,11A3,3 0 0,1 9,8A3,3 0 0,1 12,5M17.13,17C15.92,18.85 14.11,20.24 12,20.92C9.89,20.24 8.08,18.85 6.87,17C6.53,16.5 6.24,16 6,15.47C6,13.82 8.71,12.47 12,12.47C15.29,12.47 18,13.79 18,15.47C17.76,16 17.47,16.5 17.13,17Z" />
                                    </svg>
                                </span>
                                @Html.DropDownListFor(model => model.Role,
                                    new SelectList(ViewBag.Role, "Value", "Text"),
                                    "-- Seleccione un rol --",
                                    new { @class = "luxury-dropdown" })
                                @Html.ValidationMessageFor(model => model.Role, "", new { @class = "validation-message" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="luxury-input-group">
                            @Html.LabelFor(model => model.Estado, new { @class = "input-label" })
                            <div class="checkbox-container">
                                @Html.EditorFor(model => model.Estado, new { htmlAttributes = new { @class = "luxury-checkbox" } })
                                <span class="checkbox-label">Activo</span>
                                @Html.ValidationMessageFor(model => model.Estado, "", new { @class = "validation-message" })
                            </div>
                        </div>
                    </div>
                </div>

                <button type="submit" class="luxury-button">
                    <span class="button-text">Registrar Empleado</span>
                    <span class="button-icon">
                        <svg viewBox="0 0 24 24">
                            <path fill="currentColor" d="M2,21L23,12L2,3V10L17,12L2,14V21Z" />
                        </svg>
                    </span>
                    <div class="button-shine"></div>
                </button>
            }

            <div class="card-footer">
                <p class="footer-text">¿Necesitas ayuda? <a href="#" class="footer-link">Contacta al administrador</a></p>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="~/Content/assets/js/vendor/jquery-1.12.4.min.js"></script>
    <script src="~/Content/assets/js/vendor/modernizr-3.6.0.min.js"></script>
    <script src="~/Content/assets/js/bootstrap.min.js"></script>
    <script src="~/Content/assets/js/popper.min.js"></script>
    <script src="~/Content/assets/js/slick.min.js"></script>
    <script src="~/Content/assets/js/jquery.counterup.min.js"></script>
    <script src="~/Content/assets/js/waypoints.min.js"></script>
    <script src="~/Content/assets/js/jquery.magnific-popup.min.js"></script>
    <script src="~/Content/assets/js/isotope.pkgd.min.js"></script>
    <script src="~/Content/assets/js/imagesloaded.pkgd.min.js"></script>
    <script src="~/Content/assets/js/wow.min.js"></script>
    <script src="~/Content/assets/js/main.js"></script>

    <script>
        function togglePassword(inputId, icon) {
            const input = document.getElementById(inputId);
            const iconSvg = icon.querySelector('svg');

            if (input.type === "password") {
                input.type = "text";
                iconSvg.innerHTML = '<path fill="currentColor" d="M11.83,9L15,12.16C15,12.11 15,12.05 15,12A3,3 0 0,0 12,9C11.94,9 11.89,9 11.83,9M7.53,9.8L9.08,11.35C9.03,11.56 9,11.77 9,12A3,3 0 0,0 12,15C12.22,15 12.44,14.97 12.65,14.92L14.2,16.47C13.53,16.8 12.79,17 12,17A5,5 0 0,1 7,12C7,11.21 7.2,10.47 7.53,9.8M2,4.27L4.28,6.55L4.73,7C3.08,8.3 1.78,10 1,12C2.73,16.39 7,19.5 12,19.5C13.55,19.5 15.03,19.2 16.38,18.66L16.81,19.08L19.73,22L21,20.73L3.27,3M12,7A5,5 0 0,1 17,12C17,12.64 16.87,13.26 16.64,13.82L19.57,16.75C21.07,15.5 22.27,13.86 23,12C21.27,7.61 17,4.5 12,4.5C10.6,4.5 9.26,4.75 8,5.2L10.17,7.35C10.74,7.13 11.35,7 12,7Z" />';
            } else {
                input.type = "password";
                iconSvg.innerHTML = '<path fill="currentColor" d="M12,9A3,3 0 0,1 15,12A3,3 0 0,1 12,15A3,3 0 0,1 9,12A3,3 0 0,1 12,9M12,4.5C17,4.5 21.27,7.61 23,12C21.27,16.39 17,19.5 12,19.5C7,19.5 2.73,16.39 1,12C2.73,7.61 7,4.5 12,4.5M3.18,12C4.83,15.36 8.24,17.5 12,17.5C15.76,17.5 19.17,15.36 20.82,12C19.17,8.64 15.76,6.5 12,6.5C8.24,6.5 4.83,8.64 3.18,12Z" />';
            }
        }

        // Add loading state to button on form submit
        $('form').submit(function () {
            $('.luxury-button').addClass('loading');
        });
    </script>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }
</body>
</html>